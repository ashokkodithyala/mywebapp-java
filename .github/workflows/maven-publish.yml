# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

on:
  push:
    branches:
      - 'main'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest    
    steps:
    - name: checkout Git repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 21 for Build
      uses: actions/setup-java@v4
      with:        
        distribution: 'zulu' # See 'Supported distributions' for available options
        java-version: '21'        
        cache: 'maven'
        
    #- name: Build with Maven
    #  run: mvn clean install -DskipTests    
    - name: Build the app
      run: |
        mvn clean
        mvn -B package --file pom.xml
      
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4      
      with:
        name: MyWebApp-0.0.1-SNAPSHOT
        path: |                           
         ${{ github.workspace }}/target         
          retention-days: 10          
 

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      # required for all workflows
      security-events: write
      # only required for workflows in private repositories
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Change permissions
        run: chmod +x mvnw
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven-3-jdk-11@master
        continue-on-error: true           # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=results.sarif

      #- name: Upload result to GitHub Code Scanning
      #  uses: github/codeql-action/upload-sarif@v3
      #  with:
      #    sarif_file: target/surefire-reports/results.sarif
      #    wait-for-processing: true
      #    # Used to differentiate multiple results for one commit
      #    category: javaapp-analysis-tool
      
      - name: Display files after scanning
        run: ls -ls 
          

  sonar:
    name: Code-Quality Check
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21 for Sonar
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu' # See 'Supported distributions' for available options
          java-version: '21'        
      - name: Sonar Code Analysis
        run: mvn -B clean verify -Psonar -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Sonar Report artifcat upload
        uses: actions/upload-artifact@v4      
        with:
          name: Sonary Report
          path: |                                       
             ${{ github.workspace }}/reports
             retention-days: 10          



  docker:
    name: Containerization
    runs-on: ubuntu-latest
    needs: [build,sonar]
    steps:
    - name: checkout Git repository
      uses: actions/checkout@v4
    
    - name: Set up JDK 21 for Build
      uses: actions/setup-java@v4
      with:        
        distribution: 'zulu' # See 'Supported distributions' for available options
        java-version: '21'        
        cache: 'maven'

    - name: Build the app
      run: |
        mvn clean
        mvn -B package --file pom.xml
    - name: Display files after build
      run: ls -ls target/
    
    #- name: Download artifact for docker build
     # uses: actions/download-artifact@v4      
     # with:
      #  name: MyWebApp-0.0.1-SNAPSHOT
      #  path: target/jar
    #- name: Display structure of downloaded files
    #  run: ls -ls target/jar/target

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3  
    
    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build the Docker image and test
      id: docker_build      
      uses: docker/build-push-action@v5
      with:
        context: .    
        #file: ./Dockerfile
        push: false
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/myweb-app-java:${{ github.run_id }}
    
    - name: Docker Image Testing
      run: |
        docker images
        docker run --name webappcontainter -d \
              -p 8090:8080 \
              ${{ secrets.DOCKERHUB_USERNAME }}/myweb-app-java:${{ github.run_id }}
        docker ps 
        echo Testing Image using wget        
        wget -o - 127.0.0.1:8090 | grep connected
    
    - name: Push the docker image
      id: docker_push      
      uses: docker/build-push-action@v5
      with:
        #context: .        
        #file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/myweb-app-java:${{ github.run_id }}

  Deploy-To-Dev-Env:
    name: Deploy to Dev
    needs: [build,sonar,security,docker]
    runs-on: ubuntu-latest    
    steps:
    - name: checkout Git repository
      uses: actions/checkout@v4 

    