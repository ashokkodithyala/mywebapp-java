# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Java WebApp CI/CD pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
      - 'feature/*'

jobs:
  unittest:
    name: Unit Testing
    strategy:
      matrix:
        java_version: [21]
        operating_system: [ubuntu-latest]        
    runs-on: ${{ matrix.operating_system}}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up JDK 21 for Build
        uses: actions/setup-java@v4
        with:        
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}        
          cache: 'maven'   

      #- name: Unit Testing
      #  run: mvn -B test --file pom.xml    

      - name: Unit Testing        
        run: |
          mvn clean
          mvn -B test --file pom.xml 
      
      - name: Publish Test Report
        if: success() || failure()
        uses: scacap/action-surefire-report@v1

  sonar:
    name: Code Coverage
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21 for Sonar
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu' 
          java-version: '21'        
      - name: Sonar Code Analysis
        run: mvn -B clean verify -Psonar -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      #- name: SonarQube Scan
      #  uses: sonarsource/sonarqube-scan-action@master
      #  env:
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #    SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}    

      - name: Sonar Report artifcat upload
        uses: actions/upload-artifact@v4      
        with:
          name: Sonar Report
          path: |                                       
              ./reports
              retention-days: 10          
      
      - name: Wait for the quality gate result
        run: sleep 5

      - uses: phwt/sonarqube-quality-gate-action@v1
        id: quality-gate-check
        with:
          sonar-project-key: ${{ secrets.SONAR_PROJECT_KEY }}
          sonar-host-url: ${{ secrets.SONAR_HOST_URL }}
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}          

      - name: Sonar Report result
        run: |
          echo "${{ steps.quality-gate-check.outputs.project-status }}"
          echo "${{ steps.quality-gate-check.outputs.quality-gate-result }}"    
          
  depchecktest:
      runs-on: ubuntu-latest
      name: Dependency Scanning
      steps:
        - name: Checkout
          uses: actions/checkout@v2
        
        - name: Set up JDK 21 for Build
          uses: actions/setup-java@v4
          with:        
            distribution: 'zulu' 
            java-version: '21'        
            cache: 'maven' 
        
        - name: Build project with Maven
        #  run: mvn clean install        
          run: |
            mvn clean
            mvn -B package --file pom.xml
        
        - name: Depcheck
          uses: dependency-check/Dependency-Check_Action@main
          env:
            JAVA_HOME: /opt/jdk
          id: Depcheck
          with:
            project: 'webapp'
            path: '.'
            format: 'HTML'
            out: 'reports' # this is the default, no need to specify unless you wish to override it
            args: >
              --failOnCVSS 7
              --enableRetired
        - name: Upload Test results
          uses: actions/upload-artifact@master
          with:
              name: Depcheck report
              path: ${{github.workspace}}/reports
  
  build:
    name: Build
    runs-on: ubuntu-latest    
    needs: [unittest,depchecktest,security,sonar]
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 21 for Build
      uses: actions/setup-java@v4
      with:        
        distribution: 'zulu' 
        java-version: '21'        
        cache: 'maven'            
    
    #- name: Build with Maven
    #  run: mvn clean install -DskipTests    
    - name: Build the app
      run: |
        mvn clean
        mvn -B package --file pom.xml
      
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4      
      with:
        name: MyWebApp-0.0.1-SNAPSHOT
        path: |                           
         ${{ github.workspace }}/target         
          retention-days: 10          
 

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      # required for all workflows
      security-events: write
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Change permissions
        run: chmod +x mvnw
      - name: Run Snyk to check for vulnerabilities        
        uses: snyk/actions/maven-3-jdk-20@master
        continue-on-error: true           # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=results.sarif

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
          wait-for-processing: true
          # Used to differentiate multiple results for one commit
          category: javaapp-analysis-tool
      
      - name: Upload scanning report artifact 
        uses: actions/upload-artifact@v4      
        with:
          name: Security Scanning report artifact
          path: |                           
            ./results.sarif
            retention-days: 10 
      
      - name: Display files after scanning
        run: ls -ls 
          

  docker:
    name: Containerization
    runs-on: ubuntu-latest
    permissions:
      # required for all workflows
      security-events: write
      actions: read
      contents: read
    needs: [build]
    steps:
    - name: checkout Git repository
      uses: actions/checkout@v4
    
    - name: Set up JDK 21 for Build
      uses: actions/setup-java@v4
      with:        
        distribution: 'zulu' 
        java-version: '21'        
        cache: 'maven'

    - name: Build the app
      run: |
        mvn clean
        mvn -B package --file pom.xml
    - name: Display files after build
      run: ls -ls 
      #target/

      #can be deleted below action after testing
    - name: checkout Git repository
      uses: actions/checkout@v4  
    
    #- name: Download artifact for docker build
     # uses: actions/download-artifact@v4      
     # with:
      #  name: MyWebApp-0.0.1-SNAPSHOT
      #  path: target/jar
    #- name: Display structure of downloaded files
    #  run: ls -ls target/jar/target

    #- name: Set up Docker Buildx
    #  uses: docker/setup-buildx-action@v3  
    
    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build the Docker image and test
      id: docker_build      
      uses: docker/build-push-action@v5
      with:
        #context: target/
        #file: ./Dockerfile
        push: false
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/myweb-app-java:${{ github.run_id }}
    
    - name: Docker Image Testing
      run: |
        docker images
        docker run --name webappcontainter -d \
              -p 8090:8080 \
              ${{ secrets.DOCKERHUB_USERNAME }}/myweb-app-java:${{ github.run_id }}
        docker ps 
        echo Testing Image using wget        
        wget -o - 127.0.0.1:8090 | grep connected
    
    - name: Push the docker image
      id: docker_push      
      uses: docker/build-push-action@v5
      with:
        #context: .        
        #file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/myweb-app-java:${{ github.run_id }}

  Deploy-To-DevEnv:
    #if: contains(github.ref,'feature/')
    if: github.ref == 'refs/heads/main'
    name: Deploy to Development (EKS)
    needs: [docker]
    uses: ./.github/workflows/reuse-deployment.yml
    secrets:
      aws_access_keyid: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws_secret_accesskey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws_region: ${{ secrets.AWS_REGION }}
      eks_cluster_name: ${{ secrets.EKS_CLUSTER_NAME }}
      eks_role_arn: ${{ secrets.EKS_ROLE_ARN }}  
      dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
  
  Deploy-To-ProdEnv:    
    if: github.ref == 'refs/heads/main-DONOT'
    name: Deploy to Production (EKS)
    needs: [Deploy-To-DevEnv]
    uses: ./.github/workflows/reuse-deployment.yml
    secrets:
      aws_access_keyid: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws_secret_accesskey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws_region: ${{ secrets.AWS_REGION }}
      eks_cluster_name: ${{ secrets.EKS_CLUSTER_NAME }}
      eks_role_arn: ${{ secrets.EKS_ROLE_ARN }}  
      dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}    
          